---
description: development roadmap
globs: 
alwaysApply: false
---
## 阶段 1: 项目设置和核心基础设施

### 分步1 初步设置

#### 项目初始化
    -创建 Next.js 14 项目 (使用 TypeScript)
    -设置 Tailwind CSS
    -配置 ESLint 和 Prettier
    -初始化 Git 仓库
    -环境配置

#### 数据库设置
    -初始化 Supabase 项目
    -创建数据库 schema
    -设置 Row Level Security (RLS):
        重点: RLS 是 Supabase 安全的核心。务必遵循最小权限原则n即默认情况下不授予任何权限n然后根据用户角色(auth.uid() 或 auth.role())精确授予 SELECT, INSERT, UPDATE, DELETE 权限。
        对于多租户应用，确保每个用户只能访问他们自己的数据，或者通过 organization_id (如果存在组织概念) 隔离数据。
        配置数据库备份 (Supabase 提供自动备份，但也可以考虑手动导出关键数据)。

### 分步2 认证和基础架构

#### Clerk 集成
    -设置 Clerk 认证
        配置社交登录提供商 (Google, GitHub 等)
        实现用户会话管理
        创建受保护路由:
        建议: 在 Next.js 的 middleware.ts 中使用 Clerk 的 clerkMiddleware 来保护路由，确保只有认证用户才能访问 dashboard, tests, gallery, settings 等页面。
        对于 API 路由，也要确保在服务器端进行权限验证，不要仅仅依赖客户端的 Clerk 状态。

#### Stripe 集成
    -设置 Creem 账户
    -配置订阅产品 (产品、价格、订阅周期)
    -实现 webhook 处理程序:
        重点: Webhook 用于监听 Stripe 事件（例如，订阅成功、失败、续订、取消）。
        安全性: 务必验证 Stripe webhook 签名,防止伪造的请求。Stripe 的 SDK 提供了验证函数。
        实现幂等性处理 webhook 事件，防止重复处理。
        创建订阅管理系统 (例如，用户在你的应用中查看和管理他们的订阅状态)。

#### Cloudinary 设置

    -配置 Cloudinary 账户
    -设置图片上传处理程序:
        建议: 后端处理上传,而不是直接从前端上传到Cloudinary,以保护你的 API 密钥。
        确保上传时应用适当的文件夹结构和命名约定。
    -实现图片优化:
        利用 Cloudinary 的自动格式 (f_auto) 和自动质量 (q_auto)。
        根据设备和显示尺寸动态调整图片大小 (w_auto, dpr_auto)。
        创建图片管理系统 (在应用中展示用户生成的图片)。


## 阶段 2: 核心功能开发

### 分步1 心理测试模块

#### 测试数据库

    -创建测试问题数据库 (问题、选项)
    -实现测试分类 (例如，人格、情绪、职业倾向)
    -设置测试结果存储 (用户ID、测试ID、生成的图片链接)


#### 设计测试 UI 组件 (问题卡片、进度条、导航按钮)
    -实现测试流程 (逐步显示问题，收集用户输入)
    -创建进度跟踪 (显示当前进度，已完成问题数量)
    -添加测试结果可视化 (文本描述)
    -生成图片显示(等待动画界面)


#### 积分系统

    -实现积分计算 (完成测试、生成图片消耗积分,新用户赠送1积分)
    -创建积分交易系统 (记录积分的增减原因和时间)
    -设置积分历史 (用户查看自己的积分流水)
    -添加积分管理 UI (显示当前积分，购买积分入口)


### 分步2  AI 集成

#### AI SDK 设置
    -配置 Google AI SDK
    -设置 Gemini 模型集成:
        重点: 仔细研究 Gemini API 的使用限制和计费模式。
        在服务器端调用 Gemini API,不要将 API 密钥暴露给前端。
    -实现 Prompt Engineering:
        核心: 根据测试结果，设计有效的 Prompt 来指导 Gemini 模型生成特定风格、情绪、特征的肖像描述。
        考虑使用少量示例 (few-shot prompting) 来提高生成质量。
        对 Prompt 进行版本控制，并进行 A/B 测试以优化生成效果。
    -创建 AI 响应处理 (解析 Gemini 返回的文本描述或图片生成指令)。

#### 图片生成
    -实现图片生成管道
        将 Gemini 生成的文本描述作为输入，调用一个文本到图像 (Text-to-Image) 模型来生成肖像。
    -创建风格预设 (例如，油画风格、赛博朋克、水彩画等，用户可以选择)
    -设置生成队列 (如果图片生成耗时较长，需要一个队列来处理用户的请求，并提供生成进度反馈)。


#### 结果处理

    -实现结果分析 (将心理测试结果与 AI 图片结合，生成个性化的解释)
    -显示图片 (将生成的图片返回到前端页面显示)
    -存储图片 (将生成的图片 URL、相关描述、用户ID 存储在 Supabase 中)。
    -后期可以添加图片后处理 (例如，扩图、调整颜色，可以借助 Cloudinary 完成操作)



## 阶段 3: 用户界面和体验

### 分步1 前端开发

#### 布局和导航
    -创建响应式布局 (桌面、平板、手机适配)
    -实现导航系统 (主页、仪表盘、测试、画廊、设置等)
    -添加用户仪表盘 (显示积分、最近测试、生成图片概览)
    -创建设置页面 (个人信息、订阅管理、偏好设置)

#### 画廊和结果
    -创建图片画廊 (展示所有用户生成的图片，可以搜索)
    -实现分享功能 (允许用户分享到社交媒体，提供图片或链接)
    -添加下载选项 (注册用户可以下载高清图片)



### 分步2 用户体验

#### 多语言支持
    -设置 i18n 系统:
        建议: 使用 next-intl,它与 Next.js App Router 结合良好。
    -将翻译文本存储在 JSON 文件中 (public/locales)。
    -实现语言切换器
    -添加翻译 (开始时至少包括中文和英文)
    -创建语言检测 (根据浏览器设置或 IP 地址自动检测语言)

#### 性能优化
    -实现懒加载:
        对于图片使用 Next.js 的 next/image 组件，并设置 loading="lazy"。
        对于不立即需要的组件或模块使用 React.lazy() 和 Suspense 进行动态导入。
    -添加缓存:
        利用 Next.js 的数据缓存功能。
        浏览器缓存静态资源。
    -优化图片:
        确保所有图片都经过 Cloudinary 优化。
        使用 WebP/AVIF 等现代图片格式。
    -改善加载时间:
        使用 Lighthouse 等工具进行性能分析，识别瓶颈。
        减小 JavaScript bundle 大小。

#### 用户反馈
    -添加加载状态 (异步操作时显示加载动画或骨架屏)
    -实现错误处理 (友好的错误提示，而不是直接抛出错误)
    -创建成功消息 (操作成功时的提示)
    -添加用户通知 (例如，图片生成完成、订阅状态变更)。

#### SEO优化




